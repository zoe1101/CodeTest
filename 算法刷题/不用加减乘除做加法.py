'''
写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号

思路：
位运算

位运算是针对二进制的，二进制的运算有“三步走”策略：

例如5的二进制是101，17的二进制10001。
第一步：各位相加但不计进位，得到的结果是10100。
第二步：计算进位值，只在最后一位相加时产生一个进位，结果是二进制10。
第三步：把前两步的结果相加，得到的结果是10110。转换成十进制正好是22。

接着把二进制的加法用位运算替代：
（1）不考虑进位对每一位相加，0加0、1加1的结果都是0，1加0、0加1的结果都是1。这和异或运算相同。（2）考虑进位，只有1加1的时候产生进位。 位与运算只有两个数都是1的时候结果为1。考虑成两个数都做位与运算，然后向左移一位。（3）相加的过程依然重复前面两步，直到不产生进位为止。

注意：python没有无符号又移操作，所以需要越界检查一波
'''


# -*- coding:utf-8 -*-
class Solution:
    def Add(self, num1, num2):
        while num2:
            sum=(num1^num2)& 0xffffffff  ##无进位和
            carry=((num1&num2)<<1) & 0xffffffff ##进位的结果，1&1后向前进位
            num1 = sum
            num2 = carry
        if num1 <= 0x7fffffff:
            sum = num1
        else:
            sum = ~(num1^0xffffffff)
        return sum
